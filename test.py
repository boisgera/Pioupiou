#!/usr/bin/env python

# Python Standard Library
import doctest
import os
import platform
import shutil
import sys
import re
import tempfile

# Third-Party Libraries
import strictyaml

# Test Files
# ------------------------------------------------------------------------------
# Read mkdocs config file.
mkdocs_content = strictyaml.load(open("mkdocs.yml").read())["nav"].data
mkdocs_files = []
for value in [list(item.values())[0] for item in mkdocs_content]:
    if isinstance(value, str): # page
        mkdocs_files.append(value)
    else: # section
        mkdocs_files.extend([list(item.values())[0] for item in value])
mkdocs_files = ["mkdocs/" + file for file in mkdocs_files]
extra_testfiles = []
test_files = mkdocs_files + extra_testfiles

# Sandbox the Test Files 
# ------------------------------------------------------------------------------
# This is required: 
#   - to tweak the files before the tests,
#   - to avoid the generation of artifacts (generated by the test code)
#     in the current directory.
tmp_dir = tempfile.mkdtemp() # TODO: clean-up this directory
for filename in test_files:
    target_file = os.path.join(tmp_dir, filename) 
    target_dir = os.path.dirname(target_file)
    os.makedirs(target_dir, exist_ok=True)
    shutil.copy(filename, target_file)

# Tweak the Test Files
# ------------------------------------------------------------------------------
# For each file, find the python fences, see if they are in interpreter mode
# or "code" mode. If they are in code mode, add the prompts (use and heuristic,
# see <https://github.com/boisgera/pioupiou/issues/8>), then remove the fences
# and indent the code lines.

cwd = os.getcwd()
os.chdir(tmp_dir)

# Tweaks:
#   - replace the python fences with indented blocks,
#   - add prompts when it's necessary. 
for filename in test_files:
    with open(filename, encoding="utf-8") as file:
        src = file.read()
    lines = src.splitlines()
    code, prompt = False, False
    for i, line in enumerate(lines):
        if line.startswith("```python"):
            code = True
            prompt = lines[i+1].startswith(">>> ")
            lines[i] = ""
        elif line.startswith("```"):
            code = False
            lines[i] = ""
        elif code == True:
            if not prompt: 
                if line.startswith(" "): # heuristic for line continuation
                    lines[i] = "... " + line
                else:
                    lines[i] = ">>> " + line
            lines[i] = 4 * " " + lines[i]

    open(filename, "w", encoding="utf-8").write("\n".join(lines))


# Run the Tests
# ------------------------------------------------------------------------------
verbose = "-v" in sys.argv or "--verbose" in sys.argv

fails = 0
tests = 0
for filename in test_files:
    options = {"module_relative": False, "verbose": verbose}
    _fails, _tests = doctest.testfile(filename, **options)
    fails += _fails
    tests += _tests

os.chdir(cwd)

if fails > 0 or verbose: # pragma: no cover
   print()
   print(60*"-")
   print("Test Suite Report:", end=" ")
   print("{0} failures / {1} tests".format(fails, tests))
   print(60*"-")
if fails: # pragma: no cover
    sys.exit(1)
 
